@page
@model WatchesTok.Pages.APP.log.loginModel
@{
    ViewData["Title"] = "Accesso";
}

<div class="auth-container">
    <div class="hero-section">
        <div class="hero-content">
            <h1 class="hero-title">Bentornato su WatchesTok</h1>
            <p class="hero-subtitle">Accedi per continuare la tua esperienza</p>
        </div>
    </div>

    <div class="form-card">
        <div class="form-header">
            <h2 class="form-title">Accedi al tuo account</h2>
        </div>

        <div class="form-body">
            <form method="post" id="loginForm">
                @Html.AntiForgeryToken()

                <div id="errorMessage" class="notification error hidden">
                    <div class="notification-icon">
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <div class="notification-content">
                        <span id="errorText"></span>
                    </div>
                </div>

                <div class="floating-label">
                    <input asp-for="Input.Email" type="email" class="form-input" required placeholder=" ">
                    <label asp-for="Input.Email">Email</label>
                </div>

                <div class="floating-label password-field">
                    <input asp-for="Input.Password" type="password" class="form-input" required placeholder=" ">
                    <label asp-for="Input.Password">Password</label>
                    <button type="button" class="toggle-password" aria-label="Mostra/nascondi password">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>

                <div class="form-actions">
                    <button type="submit" class="submit-button">
                        <span class="button-text">Accedi</span>
                        <span class="button-icon">
                            <i class="fas fa-sign-in-alt"></i>
                        </span>
                    </button>
                </div>
            </form>

            <div class="divider">
                <span>oppure</span>
            </div>

            <div class="social-login">
                <div id="g_id_onload"
                     data-client_id="91879898111-smf0ndro34pdmd3jgg2f3c7cifki3e9u.apps.googleusercontent.com"
                     data-context="signin"
                     data-ux_mode="popup"
                     data-callback="handleCredentialResponse"
                     data-auto_prompt="false">
                </div>
                <div class="g_id_signin google-signin-container"
                     data-type="standard"
                     data-shape="pill"
                     data-theme="outline"
                     data-text="signin_with"
                     data-size="large"
                     data-logo_alignment="left">
                </div>
            </div>

            <div class="form-footer">
                <p>Non hai un account? <a href="/APP/Authentication/signin" class="text-link">Registrati</a></p>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        :root {
            --primary-color: #0052CC;
            --primary-dark: #004099;
            --primary-light: #4C9AFF;
            --dark-color: #1e293b;
            --light-color: #f8fafc;
            --gray-color: #94a3b8;
            --success-color: #10b981;
            --error-color: #ef4444;
            --transition: all 0.3s ease;
            --shadow-sm: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
            --shadow-md: 0 4px 6px rgba(0,0,0,0.1);
            --shadow-lg: 0 10px 25px rgba(0,0,0,0.1);
            --border-radius: 12px;
        }

        body {
            background-color: #f1f5f9;
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
            color: var(--dark-color);
            line-height: 1.6;
        }

        .auth-container {
            max-width: 60%;
            margin: 0 auto;
            padding: 40px 20px;
        }

        .hero-section {
            text-align: center;
            padding: 20px 0 40px;
        }

        .hero-title {
            font-size: 2.5rem;
            font-weight: 800;
            margin-bottom: 10px;
            background: linear-gradient(90deg, #0052CC, #4C9AFF);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            letter-spacing: -0.02em;
        }

            .hero-title .highlight {
                position: relative;
                z-index: 1;
            }

                .hero-title .highlight::after {
                    content: "";
                    position: absolute;
                    bottom: 6px;
                    left: 0;
                    width: 100%;
                    height: 10px;
                    background-color: rgba(0, 82, 204, 0.2);
                    z-index: -1;
                    border-radius: 10px;
                }

        .hero-subtitle {
            font-size: 1.1rem;
            color: var(--gray-color);
            font-weight: 500;
        }

        .form-card {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-md);
            overflow: hidden;
            transition: var(--transition);
            margin-bottom: 40px;
            animation: slideIn 0.5s ease forwards;
        }

            .form-card:hover {
                box-shadow: var(--shadow-lg);
            }

        .form-header {
            padding: 30px 30px 0;
            text-align: center;
        }

        .form-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 20px;
            color: var(--dark-color);
        }

        .form-body {
            padding: 20px 30px 30px;
        }

        .notification {
            display: flex;
            align-items: center;
            padding: 15px;
            border-radius: var(--border-radius);
            margin-bottom: 20px;
            transition: var(--transition);
            animation: slideIn 0.3s ease forwards;
        }

            .notification.error {
                background-color: rgba(239, 68, 68, 0.1);
                border-left: 4px solid var(--error-color);
            }

        .notification-icon {
            font-size: 1.5rem;
            margin-right: 15px;
            color: var(--error-color);
        }

        .notification-content {
            flex: 1;
        }

        .hidden {
            display: none !important;
        }

        .floating-label {
            position: relative;
            margin-bottom: 25px;
        }

        .form-input {
            width: 100%;
            padding: 15px;
            font-size: 1rem;
            border: 2px solid #e2e8f0;
            border-radius: var(--border-radius);
            background-color: white;
            transition: var(--transition);
            outline: none;
            color: var(--dark-color);
        }

            .form-input:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 3px rgba(0, 82, 204, 0.2);
            }

                .form-input:focus + label,
                .form-input:not(:placeholder-shown) + label {
                    transform: translateY(-25px) scale(0.85);
                    color: var(--primary-color);
                }

        .floating-label label {
            position: absolute;
            left: 15px;
            top: 15px;
            font-size: 1rem;
            color: var(--gray-color);
            pointer-events: none;
            transition: var(--transition);
            transform-origin: left top;
            background-color: white;
            padding: 0 5px;
        }

        .password-field {
            position: relative;
        }

        .toggle-password {
            position: absolute;
            right: 15px;
            top: 15px;
            background: none;
            border: none;
            color: var(--gray-color);
            cursor: pointer;
            font-size: 1.1rem;
            transition: var(--transition);
        }

            .toggle-password:hover {
                color: var(--primary-color);
            }

        .form-actions {
            margin-top: 30px;
        }

        .submit-button {
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            padding: 15px 30px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            gap: 10px;
            width: 100%;
        }

            .submit-button:hover {
                background-color: var(--primary-dark);
                transform: translateY(-2px);
                box-shadow: var(--shadow-md);
            }

        .button-icon {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .divider {
            position: relative;
            text-align: center;
            margin: 30px 0;
            overflow: hidden;
        }

            .divider span {
                display: inline-block;
                position: relative;
                padding: 0 15px;
                background: white;
                color: var(--gray-color);
                font-size: 0.9rem;
            }

            .divider::before {
                content: "";
                position: absolute;
                top: 50%;
                left: 0;
                right: 0;
                height: 1px;
                background-color: #e2e8f0;
                z-index: -1;
            }

        .social-login {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }

        .google-signin-container {
            width: 100%;
            display: flex;
            justify-content: center;
        }

        .form-footer {
            text-align: center;
            margin-top: 25px;
            font-size: 0.95rem;
            color: var(--gray-color);
        }

        .text-link {
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 600;
            transition: var(--transition);
        }

            .text-link:hover {
                color: var(--primary-dark);
                text-decoration: underline;
            }

        @@keyframes slideIn {
            from

        {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        /* Responsive adjustments */
        @@media (max-width: 640px) {
            .hero-title

        {
            font-size: 2rem;
        }

        .auth-container {
            padding: 20px 15px;
        }

        .form-body {
            padding: 15px 20px 25px;
        }

        }
    </style>
}

@section Scripts {
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script>
        // Controllo utente già autenticato
        document.addEventListener('DOMContentLoaded', function() {
            // Verifica se siamo in un callback di Google Auth (non reindirizzare in questo caso)
            const urlParams = new URLSearchParams(window.location.search);
            const isOAuthCallback = urlParams.has('code') || urlParams.has('token') ||
                                  urlParams.has('state') || urlParams.has('credential') ||
                                  urlParams.has('g_csrf_token');

            if (isOAuthCallback) {
                console.log('Rilevato processo di autenticazione in corso, non reindirizzare');
                return;
            }

            try {
                const isAuthenticated = localStorage.getItem("isAuthenticated");
                const userDataString = localStorage.getItem("userData");

                if (isAuthenticated === "true" && userDataString) {
                    console.log("Utente già autenticato, reindirizzamento alla home...");
                    window.location.href = "../../Index";
                } else {
                    console.log("Utente non autenticato, mostra form di login");
                }
            } catch (error) {
                console.error("Errore durante la verifica dell'autenticazione:", error);
            }

            // Password visibility toggle
            const togglePassword = document.querySelector('.toggle-password');
            const passwordInput = document.querySelector('input[type="password"]');

            if (togglePassword && passwordInput) {
                togglePassword.addEventListener('click', function() {
                    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                    passwordInput.setAttribute('type', type);

                    // Toggle eye icon
                    const icon = this.querySelector('i');
                    icon.classList.toggle('fa-eye');
                    icon.classList.toggle('fa-eye-slash');
                });
            }
        });

        // Funzione per salvare i dati dell'utente nel localStorage nel formato richiesto
        function saveUserToLocalStorage(user) {
            console.log("Saving user to localStorage:", user);

            // Salva flag di autenticazione
            localStorage.setItem("isAuthenticated", "true");

            // Salva l'oggetto utente completo come JSON string
            localStorage.setItem("utente", JSON.stringify(user));

            // Crea e salva userData con i campi email, nome e cognome
            const userData = {
                email: user.email,
                nome: user.nome,
                cognome: user.cognome
            };
            localStorage.setItem("userData", JSON.stringify(userData));

            // Redirigi alla home
            window.location.href = "../../Index";
        }

        // Funzione per mostrare errori
        function showError(message) {
            const errorElement = document.getElementById("errorMessage");
            const errorTextElement = document.getElementById("errorText");

            errorTextElement.textContent = message;
            errorElement.classList.remove("hidden");

            setTimeout(() => {
                errorElement.classList.add("hidden");
            }, 5000);
        }

        // Gestisci il login tramite form
                // Modifica il gestore di login del form
        document.getElementById("loginForm").addEventListener("submit", async function (e) {
            e.preventDefault();
            const formData = new FormData(this);

            // Estrai email e password per verificare se sono credenziali admin
            const email = formData.get("Input.Email");
            const password = formData.get("Input.Password");

            // Controllo per credenziali admin
            if (email === "admin@admin.it" && password === "admin") {
                console.log("Credenziali admin rilevate, reindirizzamento alla pagina admin...");

                // Salva flag di autenticazione e informazioni admin
                localStorage.setItem("isAuthenticated", "true");
                localStorage.setItem("isAdmin", "true");

                // Crea oggetto utente admin
                const adminUser = {
                    email: "admin@admin.it",
                    nome: "Admin",
                    cognome: "admin"
                };

                // Salva dati admin
                localStorage.setItem("utente", JSON.stringify(adminUser));
                localStorage.setItem("userData", JSON.stringify(adminUser));

                // Reindirizza alla pagina admin
                window.location.href = "../Admin/Admin";
                return;
            }

            // Continua con il normale flusso di login se non è admin

            // Animazione pulsante login
            const submitButton = this.querySelector('button[type="submit"]');
            const originalButtonContent = submitButton.innerHTML;
            submitButton.innerHTML = '<div class="spinner-button"></div>';
            submitButton.disabled = true;

            try {
                const res = await fetch('?handler=Login', {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    },
                    body: formData
                });

                if (!res.ok) {
                    throw new Error('Errore nella risposta del server');
                }

                const user = await res.json();
                if (user) {
                    saveUserToLocalStorage(user);
                } else {
                    showError("Credenziali errate.");
                }
            } catch (error) {
                console.error('Errore durante il login:', error);
                showError("Si è verificato un errore durante il login.");

                // Ripristina il pulsante
                submitButton.innerHTML = originalButtonContent;
                submitButton.disabled = false;
            }
        });

        // Gestisci la risposta del login Google
        async function handleCredentialResponse(response) {
            try {
                if (!response || !response.credential) {
                    throw new Error('Risposta Google non valida');
                }

                const jwt = response.credential; // Ottieni il JWT (token)
                const payload = JSON.parse(atob(jwt.split('.')[1])); // Decodifica il JWT

                console.log("Google auth payload:", payload);

                const googleUser = {
                    Email: payload.email,
                    Nome: payload.given_name || payload.name.split(' ')[0],
                    Cognome: payload.family_name || payload.name.split(' ').slice(1).join(' ')
                };

                console.log("Sending to server:", googleUser);

                // Ottieni il token anti-forgery
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                // Invia la richiesta di login al backend con i dati di Google
                const res = await fetch('?handler=GoogleAuth', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(googleUser)
                });

                if (!res.ok) {
                    const errorText = await res.text();
                    console.error("Server response error:", errorText);
                    throw new Error('Errore nella risposta del server: ' + errorText);
                }

                const user = await res.json();
                console.log("Server response:", user);

                if (user) {
                    saveUserToLocalStorage(user);
                } else {
                    showError("Errore durante l'accesso con Google");
                }
            } catch (error) {
                console.error('Errore durante il login con Google:', error);
                showError("Si è verificato un errore durante l'accesso con Google: " + error.message);
            }
        }
    </script>


    <style>
        /* Spinner per il pulsante di login */
        .spinner-button {
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top-color: white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @@keyframes spin {
            to

        {
            transform: rotate(360deg);
        }

        }
    </style>
}